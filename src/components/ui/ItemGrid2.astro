---
import type { ItemGrid as Props } from '~/types';
import { Icon } from 'astro-icon/components';
import { twMerge } from 'tailwind-merge';
import Button from './Button.astro';
import { Image } from 'astro:assets';

import imageDefault from '~/assets/images/default-ui-image.webp';

const { items = [], columns, defaultIcon = '', classes = {} } = Astro.props;

const {
  container: containerClass = 'overflow-x-auto',
  // container: containerClass = "sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3",
  panel: panelClass = '',
  title: titleClass = '',
  description: descriptionClass = '',
  icon: defaultIconClass = 'text-primary',
} = classes;
---

{
  items && (
    <div
      class={twMerge(
        `grid gap-8 gap-x-12 sm:gap-y-8 ${
          columns === 6
            ? ' grid-cols-2 lg:grid-cols-6 md:grid-cols-5 sm:grid-cols-4'
            : columns === 5
              ? 'lg:grid-cols-5 md:grid-cols-4 sm:grid-cols-3'
              : columns === 4
                ? 'lg:grid-cols-4 md:grid-cols-3 sm:grid-cols-2'
                : columns === 3
                  ? 'grid-cols-2 lg:grid-cols-3 sm:grid-cols-2'
                  : columns === 2
                    ? 'sm:grid-cols-2 '
                    : ''
        }`,
        containerClass
      )}
    >
      {items.map(({ title, description, imgSrc, imgAlt, icon, callToAction, classes: itemClasses = {} }) => {
        const imgObj = {
          src: imgSrc ?? imageDefault,
          alt: imgAlt ?? 'Image',
        };
        return (
          <div class={twMerge('relative flex flex-col', panelClass, itemClasses?.panel)}>
            {imgSrc && (
              <Image
                class="mx-auto mb-2 rounded-md w-full object-cover"
                loading="lazy"
                width={400}
                height={300}
                {...imgObj}
              />
            )}
            {(icon || defaultIcon) && (
              <Icon name={icon || defaultIcon} class={twMerge('mb-2 w-10 h-10', defaultIconClass, itemClasses?.icon)} />
            )}
            <div class={twMerge('text-xl font-bold', titleClass, itemClasses?.title)}>{title}</div>
            {description && (
              <p
                class={twMerge('text-muted mt-2', descriptionClass, itemClasses?.description)}
                set:html={description}
              />
            )}
            {callToAction && (
              <div class="mt-2">
                <Button {...callToAction} />
              </div>
            )}
          </div>
        );
      })}
    </div>
  )
}
